public class CarTest {
	public static void main(String[] args) {
		/*상태값
		 * 색깔(문자열):color, 현재속도(정수):speed, 주행거리(정수):mileage,
		 * 동작
		 *  void speedUp(): 현재속도를 5증가 시킨다.
		 *  void speedDown(): 현재속도를 5감소 시킨다.
		 *  void printCar() : 현재 상태 값 출력
		 *  생성자
		 *  기본생성자
		 *  : 색깔 ="빨강", 현재속도 : 0, 주행거리는 : 0으로 초기화
		 *  색깔, 현재속도, 주행거리를 매개변수로 전달받아서 멤버변수로 초기화하는 생성자
		 */
		
		//Car 클래스를 만들어서 객체 생성하고, 메서드 호출해보기
		//Car 클래스의 외부영역
		//클래스 내부와 외부에서의 메서드 호출 방법이 다름
		//클래스 내부에서는 멤버메서드의 이름만 호출하면 됨
		
		//클래스 외부에서는 객체먼저 만들고 객체를 통해서 호출
			Car c = new Car();
			c.printCar();
			c.speedDown();
			//클래스들은 다양한 종류의 메서드를 가지고 있음
			//특정 목적을 가지는 메서드들도 있음
			//getter(접근자), setter(설정자)
			//: 멤버변수에 값을 가져오거나, 멤버변수에 값을 할당할때 사용하는메서드
			
			//c 객체의 멤버 변수 값 바꾸기
			//객체안의 변수를 함부러 바꾸지 못하게 막자>> 캡슐화
			//color를 볼 수 있게 하자
			//getter를 사용하면, 설정은 못하게, 값은 사용할 수 있다.
			System.out.println(c.getColor());
			c.setColor("파랑");
			System.out.println(c.getColor());
			c.setSpeed(200);
			c.printCar();
			
			System.out.println(c);
	}
}
/*

Day0410_java

객체지향의 특징

캡슐화 : 객체의 내부정보를 보호 및 기능과 상태를 하나로 묶어주는 개념
//변수나 메서드에 접근제한

>>getter(접근자),setter(설정자)가 필요

getter(접근자),setter(설정자)의 역활 : 변수에 접근을 제한한다.

getter 메서드

get 필드명() : 해당 필드를 반호나

ex) color 의 getter : getColor()

setter 메서드 :

set필드명(값) : 해당필드에 값을 저장

ex) color의 setter : setColor(String c)

추상화 : 공통되는 개념을 뽑아내서 기능이나 내용의 상세한 부분은 작성하지 않고

      정의만 내려서, 기능과 내용을 확장가능하게 하는 개

  ex)

      인간은 머리 팔, 다리가 있다.

  백인 피부색은 희고, 팔다리는 길다.

상속 : 공통 기능을 가지지만 다른 추가적인 작업이 필요로 할때 상속을 받아서

          부모의 기능을 그대로 사용하면서 기능을 추가해서 코드의 재사용성을 높일 수 있다.    

다형성 :  하나의 이름으로 다향한 작업을 할 수 있게 만드는 개념

       ex)

       공무원 :

       소방관              경찰관            행정관

       불끈다.           도둑을 잡는다.           시민돕는다.

       공무원 일하세요:

private : 클래스 외부에서 사용하지 못하도록 변수에 접근 제한을 설정

public : 클래스 외부에서도 변수에 접근 할 수 있도록 접근제한 설정

getter/setter 사용하는 이유
1.외부에서 변수에 함부러 접근해서 변경하는 것을 막기 위해

2.세분화된 접근제어 가능: (읽기전용/쓰기전용/읽기쓰기 허용/둘다안됨)

3.입력값에 대한 검증이 가능(maxSpeed, minSpeed)

 */

