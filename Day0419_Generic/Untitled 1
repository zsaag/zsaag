Generic
:다양한 종류의 데이터를 하나의 코드로 처리하기 위함
:코드의 재사용성을 높이는 방법




기존에는 object 변수에 여러 변수를 참조시켜서 사용
:다양한 기능을 가지지는 못함, 다양한 데이터가 가지는 연산이 모두 다르기 때문에 구현하지 못함
대신 다양한 데이터를 저장하는 용도로 사용

Store 클래스
: 다양한 종류의 데이터를 저장하고, 반환할 수 있는 클래스
Object 변수를 멤버로 가진다: 모든 데이터를 참조하기 위해서

제네릭 : Object로 다양한 데이터를 저장하기에는 무리가 있기 때문에 사용


클래스이름<알파벳>, 알파벳은 아무거나 사용가능
보통은 대문자 알파벳 사용
T(type),V(value),K(key),E(element)
public class Stroe<T>{
	//클래스 안에서는 T를 하나의 타입으로 생각하고 사용하면 됨
}

//제네릭 참조 변수에 어떤 데이터 타입의 제네릭 객체가 참조 될지 모를때
		//와일드카드를 사용 할 수 있다. ?
		//와일드 카드의 종류
		//?			: 모든 데이터 타입의 제네릭 객체가 참조 가능
		//? super 클래스 : 클래스자기 자신 또는 슈퍼클래스의 제네릭객체가 참조가능
		//? extends 클래스 : 클래스 자기 자신 또는 서브클래스의 제네릭 객체가 참조 가능
//Shape shape = new Rectangle(); 얘는 되지만 제네릭 객체 참조는 안된다.
		//Store<Shape> s = new Store<Rectangle>(); X

컬렉션(Collection) : 자료구조를 구현해놓은  클래스, 인터페이스
List, Set, Map, Stack, Queue : 인터페이스
(메서드가 선언만 되어 있는 것)

List : ArrayList:데이터 변경이 적고,조회 할 일이 많을 때 사용, LinkedList:데이터 변경이 많고, 조회 할일이 적을 때
Set  : HashSet
Map  : HashMap




리스트(list):순서가 있는 데이터의 나열
스텍(stack):선입후출 형태의 데이터 모음
큐(queue):선입선출 형태의 자료구조
집합(set):중복이 없는 데이터의 모음
map


// list: interface,
		//ArrayList, LinkedList
		//둘다 List 인터페이스를 구현한 List구현 클래스
		
		//리스트가 어떤 메서드를 구현해야 하는 지 확인: 엄청 많음
		//너무 많으니까 간단하게 몇가지 메서드만 구현 : Generic을 이용
		//StudentList의 업그레이드 버전이라고 보시면 됩니다.
		//MyList는 임의의 데이터 타입을 넣을 수 있도록 작성 : Generic으로...
		
/*
 * add(E): 파라미터로 전달받은 데이터를 array에 추가
 * remove(int) : 인덱스를 전달받아서 array에서 해당 인덱스의 데이터를 삭제
 * get(int) : 인덱스를 전달받아서 해당 인덱스의 데이터를 반환
 * size() : array 길이 반환
 * set(int,E) :  특정 인덱스에 데이터 넣기
 */

